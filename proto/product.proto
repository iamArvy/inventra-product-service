syntax = "proto3";

package product;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common.proto";

message CreateProduct {
  string storeId = 1;
  string name = 2;
  optional string description = 3;
  optional string image = 4;
  string categoryId = 5;
  string sku = 6;
  int32 price = 7;
  int32 stock = 8;
  map<string, google.protobuf.Value> attributes = 9;
  repeated string tags = 10;
}

message ProductCategory {
  string id = 1;
  string name = 2;
}

message Product{
  string id = 1;
  string name = 2;
  optional string description = 3;
  optional string image = 4;
  string storeId = 5;
  ProductCategory category = 6;
  string sku = 7;
  int32 price = 8;
  int32 stock = 9;
  map<string, google.protobuf.Value> attributes = 10;
  repeated string tags = 11;
  google.protobuf.Timestamp createdAt = 12;
  google.protobuf.Timestamp deleted_at = 13;
}

enum ProductSortBy {
  NAME = 1;
  PRICE = 2;
  STOCK = 3;
  SKU = 4;
  DATE = 5;
}

message ProductQuery {
  optional int32 page = 1;
  optional int32 pageSize = 2;
  optional common.SortOrder order = 3;
  optional ProductSortBy sb = 4;
  optional string name = 5;
  optional string sku = 6;
  optional string storeId = 7;
  optional string categoryId = 8;
  optional string minPrice = 9;
  optional int32 maxPrice = 10;
  optional int32 minStock = 11;
  optional int32 maxStock = 12;
  repeated string tags = 13;
  optional bool deleted = 14;
}

message ProductList {
  repeated Product docs = 1;
  int32 totalDocs = 2;
  int32 limit = 3;
  optional int32 page = 4;
  int32 totalPages = 5;
  int32 pagingCounter = 6;
  bool hasPrevPage = 7;
  bool hasNextPage = 8;
  optional int32 prevPage = 9;
  optional int32 nextPage = 10;
  int32 offset = 11;
}

message PartialProductInput {
  optional string name = 1;
  optional string description = 2;
  optional string image = 3;
  optional string categoryId = 5;
  optional string sku = 6;
  optional int32 price = 7;
  map<string, google.protobuf.Value> attributes = 8;
  repeated string tags = 9;
}

message UpdateProduct{
  string id = 1;
  PartialProductInput data = 2;
}

service ProductService {
  rpc Create (CreateProduct) returns (Product) {}
  rpc Get (common.Id) returns (Product) {}
  rpc List (ProductQuery) returns (ProductList) {}
  rpc Update (UpdateProduct) returns (common.Status) {}
  rpc Delete (common.Id) returns (common.Status) {}
}
